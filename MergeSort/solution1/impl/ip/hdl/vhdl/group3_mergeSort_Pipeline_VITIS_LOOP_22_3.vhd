-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity group3_mergeSort_Pipeline_VITIS_LOOP_22_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    k : IN STD_LOGIC_VECTOR (31 downto 0);
    sext_ln22_3 : IN STD_LOGIC_VECTOR (32 downto 0);
    l1_2_cast2 : IN STD_LOGIC_VECTOR (31 downto 0);
    sext_ln22 : IN STD_LOGIC_VECTOR (31 downto 0);
    l1_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    h1 : IN STD_LOGIC_VECTOR (31 downto 0);
    icmp_ln22 : IN STD_LOGIC_VECTOR (0 downto 0);
    temp_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    temp_ce0 : OUT STD_LOGIC;
    temp_we0 : OUT STD_LOGIC;
    temp_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    arr_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_ln22_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    phi_ln22_out_ap_vld : OUT STD_LOGIC;
    phi_ln22_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    phi_ln22_1_out_ap_vld : OUT STD_LOGIC;
    indvars_iv1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    indvars_iv1_out_ap_vld : OUT STD_LOGIC;
    k_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    k_1_out_ap_vld : OUT STD_LOGIC;
    i_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    i_1_out_ap_vld : OUT STD_LOGIC;
    icmp_ln22_1_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    icmp_ln22_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of group3_mergeSort_Pipeline_VITIS_LOOP_22_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal and_ln22_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_1_fu_64 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal k_1_fu_68 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln24_fu_268_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln22_cast_fu_187_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv1_fu_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln22_fu_280_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal l1_2_cast2_cast_fu_191_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_ln22_1_fu_76 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln22_1_fu_286_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln22_3_cast_fu_195_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_ln22_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln22_2_fu_292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal xor_ln22_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_1_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component group3_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component group3_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_64 <= l1_2;
                elsif (((ap_const_lv1_1 = and_ln22_fu_257_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_1_fu_64 <= i_3_fu_274_p2;
                end if;
            end if; 
        end if;
    end process;

    indvars_iv1_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvars_iv1_fu_72 <= l1_2_cast2_cast_fu_191_p1;
                elsif (((ap_const_lv1_1 = and_ln22_fu_257_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvars_iv1_fu_72 <= add_ln22_fu_280_p2;
                end if;
            end if; 
        end if;
    end process;

    k_1_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    k_1_fu_68 <= sext_ln22_cast_fu_187_p1;
                elsif (((ap_const_lv1_1 = and_ln22_fu_257_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    k_1_fu_68 <= add_ln24_fu_268_p2;
                end if;
            end if; 
        end if;
    end process;

    phi_ln22_1_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    phi_ln22_1_fu_76 <= sext_ln22_3_cast_fu_195_p1;
                elsif (((ap_const_lv1_1 = and_ln22_fu_257_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    phi_ln22_1_fu_76 <= add_ln22_1_fu_286_p2;
                end if;
            end if; 
        end if;
    end process;

    phi_ln22_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    phi_ln22_fu_80 <= k;
                elsif (((ap_const_lv1_1 = and_ln22_fu_257_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    phi_ln22_fu_80 <= add_ln22_2_fu_292_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln22_1_fu_286_p2 <= std_logic_vector(unsigned(phi_ln22_1_fu_76) + unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF));
    add_ln22_2_fu_292_p2 <= std_logic_vector(unsigned(phi_ln22_fu_80) + unsigned(ap_const_lv32_1));
    add_ln22_fu_280_p2 <= std_logic_vector(unsigned(indvars_iv1_fu_72) + unsigned(ap_const_lv64_1));
    add_ln24_fu_268_p2 <= std_logic_vector(unsigned(k_1_fu_68) + unsigned(ap_const_lv64_1));
    and_ln22_fu_257_p2 <= (xor_ln22_fu_250_p2 and icmp_ln22);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, and_ln22_fu_257_p2)
    begin
        if (((ap_const_lv1_0 = and_ln22_fu_257_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    i_1_out <= i_1_fu_64;

    i_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, and_ln22_fu_257_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = and_ln22_fu_257_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            i_1_out_ap_vld <= ap_const_logic_1;
        else 
            i_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    i_3_fu_274_p2 <= std_logic_vector(unsigned(i_1_fu_64) + unsigned(ap_const_lv32_1));
    icmp_ln22_1_fu_245_p2 <= "1" when (signed(h1) < signed(i_1_fu_64)) else "0";
    icmp_ln22_1_out <= xor_ln22_fu_250_p2;

    icmp_ln22_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, and_ln22_fu_257_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = and_ln22_fu_257_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            icmp_ln22_1_out_ap_vld <= ap_const_logic_1;
        else 
            icmp_ln22_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    indvars_iv1_out <= indvars_iv1_fu_72;

    indvars_iv1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, and_ln22_fu_257_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = and_ln22_fu_257_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            indvars_iv1_out_ap_vld <= ap_const_logic_1;
        else 
            indvars_iv1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    k_1_out <= k_1_fu_68(32 - 1 downto 0);

    k_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, and_ln22_fu_257_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = and_ln22_fu_257_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            k_1_out_ap_vld <= ap_const_logic_1;
        else 
            k_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        l1_2_cast2_cast_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(l1_2_cast2),64));

    phi_ln22_1_out <= phi_ln22_1_fu_76(32 - 1 downto 0);

    phi_ln22_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, and_ln22_fu_257_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = and_ln22_fu_257_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            phi_ln22_1_out_ap_vld <= ap_const_logic_1;
        else 
            phi_ln22_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    phi_ln22_out <= phi_ln22_fu_80;

    phi_ln22_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, and_ln22_fu_257_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = and_ln22_fu_257_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            phi_ln22_out_ap_vld <= ap_const_logic_1;
        else 
            phi_ln22_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln22_3_cast_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln22_3),64));

        sext_ln22_cast_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln22),64));

    temp_address0 <= k_1_fu_68(5 - 1 downto 0);

    temp_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_ce0 <= ap_const_logic_1;
        else 
            temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_d0 <= arr_0;

    temp_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln22_fu_257_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_1 = and_ln22_fu_257_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_we0 <= ap_const_logic_1;
        else 
            temp_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln22_fu_250_p2 <= (icmp_ln22_1_fu_245_p2 xor ap_const_lv1_1);
end behav;
