// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module group3_mergeSort_Pipeline_VITIS_LOOP_22_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        k,
        sext_ln22_3,
        l1_2_cast2,
        sext_ln22,
        l1_2,
        h1,
        icmp_ln22,
        temp_address0,
        temp_ce0,
        temp_we0,
        temp_d0,
        arr_0,
        phi_ln22_out,
        phi_ln22_out_ap_vld,
        phi_ln22_1_out,
        phi_ln22_1_out_ap_vld,
        indvars_iv1_out,
        indvars_iv1_out_ap_vld,
        k_1_out,
        k_1_out_ap_vld,
        i_1_out,
        i_1_out_ap_vld,
        icmp_ln22_1_out,
        icmp_ln22_1_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] k;
input  [32:0] sext_ln22_3;
input  [31:0] l1_2_cast2;
input  [31:0] sext_ln22;
input  [31:0] l1_2;
input  [31:0] h1;
input  [0:0] icmp_ln22;
output  [4:0] temp_address0;
output   temp_ce0;
output   temp_we0;
output  [31:0] temp_d0;
input  [31:0] arr_0;
output  [31:0] phi_ln22_out;
output   phi_ln22_out_ap_vld;
output  [31:0] phi_ln22_1_out;
output   phi_ln22_1_out_ap_vld;
output  [63:0] indvars_iv1_out;
output   indvars_iv1_out_ap_vld;
output  [31:0] k_1_out;
output   k_1_out_ap_vld;
output  [31:0] i_1_out;
output   i_1_out_ap_vld;
output  [0:0] icmp_ln22_1_out;
output   icmp_ln22_1_out_ap_vld;

reg ap_idle;
reg temp_ce0;
reg temp_we0;
reg phi_ln22_out_ap_vld;
reg phi_ln22_1_out_ap_vld;
reg indvars_iv1_out_ap_vld;
reg k_1_out_ap_vld;
reg i_1_out_ap_vld;
reg icmp_ln22_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] and_ln22_fu_257_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
reg   [31:0] i_1_fu_64;
wire   [31:0] i_3_fu_274_p2;
wire    ap_loop_init;
reg   [63:0] k_1_fu_68;
wire   [63:0] add_ln24_fu_268_p2;
wire  signed [63:0] sext_ln22_cast_fu_187_p1;
reg   [63:0] indvars_iv1_fu_72;
wire   [63:0] add_ln22_fu_280_p2;
wire  signed [63:0] l1_2_cast2_cast_fu_191_p1;
reg   [63:0] phi_ln22_1_fu_76;
wire   [63:0] add_ln22_1_fu_286_p2;
wire  signed [63:0] sext_ln22_3_cast_fu_195_p1;
reg   [31:0] phi_ln22_fu_80;
wire   [31:0] add_ln22_2_fu_292_p2;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] xor_ln22_fu_250_p2;
wire   [0:0] icmp_ln22_1_fu_245_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

group3_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_1_fu_64 <= l1_2;
        end else if (((1'd1 == and_ln22_fu_257_p2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_1_fu_64 <= i_3_fu_274_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvars_iv1_fu_72 <= l1_2_cast2_cast_fu_191_p1;
        end else if (((1'd1 == and_ln22_fu_257_p2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvars_iv1_fu_72 <= add_ln22_fu_280_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            k_1_fu_68 <= sext_ln22_cast_fu_187_p1;
        end else if (((1'd1 == and_ln22_fu_257_p2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            k_1_fu_68 <= add_ln24_fu_268_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            phi_ln22_1_fu_76 <= sext_ln22_3_cast_fu_195_p1;
        end else if (((1'd1 == and_ln22_fu_257_p2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            phi_ln22_1_fu_76 <= add_ln22_1_fu_286_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            phi_ln22_fu_80 <= k;
        end else if (((1'd1 == and_ln22_fu_257_p2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            phi_ln22_fu_80 <= add_ln22_2_fu_292_p2;
        end
    end
end

always @ (*) begin
    if (((1'd0 == and_ln22_fu_257_p2) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln22_fu_257_p2) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_1_out_ap_vld = 1'b1;
    end else begin
        i_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln22_fu_257_p2) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln22_1_out_ap_vld = 1'b1;
    end else begin
        icmp_ln22_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln22_fu_257_p2) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvars_iv1_out_ap_vld = 1'b1;
    end else begin
        indvars_iv1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln22_fu_257_p2) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_1_out_ap_vld = 1'b1;
    end else begin
        k_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln22_fu_257_p2) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phi_ln22_1_out_ap_vld = 1'b1;
    end else begin
        phi_ln22_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln22_fu_257_p2) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phi_ln22_out_ap_vld = 1'b1;
    end else begin
        phi_ln22_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_ce0 = 1'b1;
    end else begin
        temp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln22_fu_257_p2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_we0 = 1'b1;
    end else begin
        temp_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln22_1_fu_286_p2 = ($signed(phi_ln22_1_fu_76) + $signed(64'd18446744073709551615));

assign add_ln22_2_fu_292_p2 = (phi_ln22_fu_80 + 32'd1);

assign add_ln22_fu_280_p2 = (indvars_iv1_fu_72 + 64'd1);

assign add_ln24_fu_268_p2 = (k_1_fu_68 + 64'd1);

assign and_ln22_fu_257_p2 = (xor_ln22_fu_250_p2 & icmp_ln22);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign i_1_out = i_1_fu_64;

assign i_3_fu_274_p2 = (i_1_fu_64 + 32'd1);

assign icmp_ln22_1_fu_245_p2 = (($signed(h1) < $signed(i_1_fu_64)) ? 1'b1 : 1'b0);

assign icmp_ln22_1_out = xor_ln22_fu_250_p2;

assign indvars_iv1_out = indvars_iv1_fu_72;

assign k_1_out = k_1_fu_68[31:0];

assign l1_2_cast2_cast_fu_191_p1 = $signed(l1_2_cast2);

assign phi_ln22_1_out = phi_ln22_1_fu_76[31:0];

assign phi_ln22_out = phi_ln22_fu_80;

assign sext_ln22_3_cast_fu_195_p1 = $signed(sext_ln22_3);

assign sext_ln22_cast_fu_187_p1 = $signed(sext_ln22);

assign temp_address0 = k_1_fu_68;

assign temp_d0 = arr_0;

assign xor_ln22_fu_250_p2 = (icmp_ln22_1_fu_245_p2 ^ 1'd1);

endmodule //group3_mergeSort_Pipeline_VITIS_LOOP_22_3
